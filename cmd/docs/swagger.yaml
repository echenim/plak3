basePath: /api/v1
definitions:
  searchmodels.UserSearchCriteria:
    description: User model.
    properties:
      Id:
        type: integer
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
  views.Plak3Login:
    description: login model.
    properties:
      password:
        type: string
      userName:
        type: string
    type: object
  views.Plak3Roles:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  views.Plak3SignedInUser:
    description: login response model.
    properties:
      authorization:
        items:
          $ref: '#/definitions/views.Plak3Roles'
        type: array
      id:
        type: integer
      name:
        type: string
      userName:
        type: string
    type: object
  views.PlakUser:
    description: User model.
    properties:
      Id:
        type: integer
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      lockoutEnabled:
        type: boolean
      password:
        type: string
      phoneNumber:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  views.PlakViewUser:
    description: User model.
    properties:
      Id:
        type: integer
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      roles:
        items:
          $ref: '#/definitions/views.Plak3Roles'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns user information.
      parameters:
      - description: Login information
        in: body
        name: views.Plak3Login
        required: true
        schema:
          $ref: '#/definitions/views.Plak3Login'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/views.Plak3SignedInUser'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/views.Plak3SignedInUser'
        "401":
          description: Invalid login credentials
          schema:
            $ref: '#/definitions/views.Plak3SignedInUser'
      summary: User login
      tags:
      - authenticate & authorization
  /users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/views.PlakViewUser'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/views.PlakViewUser'
            type: array
      summary: List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Adds a new user to the system
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/views.PlakUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/views.PlakUser'
        "400":
          description: Invalid user data
          schema:
            $ref: '#/definitions/views.PlakUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/views.PlakUser'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User removed successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Invalid user ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Failed to remove user'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves a user based on their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the user
          schema:
            $ref: '#/definitions/views.PlakViewUser'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/views.PlakViewUser'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/views.PlakViewUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/views.PlakViewUser'
      summary: Find a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information based on provided data
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/views.PlakUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/views.PlakUser'
        "400":
          description: Invalid user data
          schema:
            $ref: '#/definitions/views.PlakUser'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/views.PlakUser'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/views.PlakUser'
      summary: Update user information
      tags:
      - users
  /users/search:
    post:
      consumes:
      - application/json
      description: Searches for users based on various criteria like ID, first name,
        last name, and email.
      parameters:
      - description: Search Criteria
        in: body
        name: searchmodels.UserSearchCriteria
        required: true
        schema:
          $ref: '#/definitions/searchmodels.UserSearchCriteria'
      produces:
      - application/json
      responses:
        "200":
          description: List of users matching criteria
          schema:
            items:
              $ref: '#/definitions/views.PlakViewUser'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/views.PlakViewUser'
            type: array
        "404":
          description: Not Found
          schema:
            items:
              $ref: '#/definitions/views.PlakViewUser'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/views.PlakViewUser'
            type: array
      summary: Search for users
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
